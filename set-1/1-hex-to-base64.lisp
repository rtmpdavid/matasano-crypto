(in-package :cl-user)
(defpackage matasano
  (:use :cl))
(in-package :matasano)

(alexandria:define-constant +base64-dict+ "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" :test #'string-equal)
(alexandria:define-constant +nibble-specs+ #(#((6 . 2) 0)
                                             #((2 . 0) 4)
                                             #((4 . 4) 0)
                                             #((4 . 0) 2)
                                             #((2 . 6) 0)
                                             #((6 . 0) 0))
  :test #'equalp)

(defun load-byte (n integer)
  (let ((spec (aref +nibble-specs+ n)))
    (ash (ldb (aref spec 0) integer)
         (aref spec 1))))

(defun encode-bytes (b1 b2 b3)
  (values (load-byte 0 b1)
          (logior (load-byte 1 b1)
                  (load-byte 2 b2))
          (logior (load-byte 3 b2)
                  (load-byte 4 b3))
          (load-byte 5 b3)))

(defun base64-encode (hex)
  (base64-encode-bytes (hex-decode hex)))

(defun base64-encode-bytes (bytes)
  (let* ((bytes-len (length bytes))
         (pad-len (if (zerop (mod bytes-len 3)) 0
                      (- 3 (mod bytes-len 3))))
         (out-string (make-array (+ (floor (/ bytes-len 3/4))
                                    (if (= pad-len 1) 2
                                        (if (= pad-len 2) 3 0)))
                                    :element-type 'character))
         (byte-offset -1)
         (string-offset -1))
    (loop for i from 0 to (1- (/ bytes-len 3))
       do (multiple-value-bind (ch1 ch2 ch3 ch4)
              (encode-bytes (aref bytes (incf byte-offset)) (aref bytes (incf byte-offset)) (aref bytes (incf byte-offset)))
            (setf (aref out-string (incf string-offset)) (aref +base64-dict+ ch1))
            (setf (aref out-string (incf string-offset)) (aref +base64-dict+ ch2))
            (setf (aref out-string (incf string-offset)) (aref +base64-dict+ ch3))
            (setf (aref out-string (incf string-offset)) (aref +base64-dict+ ch4)))
       finally (progn
                 (if (= pad-len 1)
                     (multiple-value-bind (ch1 ch2 ch3)
                         (encode-bytes (aref bytes (incf byte-offset)) (aref bytes (incf byte-offset)) 0)
                       (setf (aref out-string (incf string-offset)) (aref +base64-dict+ ch1))
                       (setf (aref out-string (incf string-offset)) (aref +base64-dict+ ch2))
                       (setf (aref out-string (incf string-offset)) (aref +base64-dict+ ch3))
                       (setf (aref out-string (incf string-offset)) #\=)))
                 (if (= pad-len 2)
                     (multiple-value-bind (ch1 ch2)
                         (encode-bytes (aref bytes (incf byte-offset)) 0 0)
                       (setf (aref out-string (incf string-offset)) (aref +base64-dict+ ch1))
                       (setf (aref out-string (incf string-offset)) (aref +base64-dict+ ch2))
                       (setf (aref out-string (incf string-offset)) #\=)
                       (setf (aref out-string (incf string-offset)) #\=)))
                 (return out-string)))))
